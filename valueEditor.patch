diff --git a/core/templates/components/interaction-display/dynamic-content.module.ts b/core/templates/components/interaction-display/dynamic-content.module.ts
index f0e241c9b0..51f27a405b 100644
--- a/core/templates/components/interaction-display/dynamic-content.module.ts
+++ b/core/templates/components/interaction-display/dynamic-content.module.ts
@@ -21,18 +21,28 @@ import 'zone.js';
 import { CommonModule } from '@angular/common';
 import { NgModule } from '@angular/core';
 import { InteractionDisplayComponent } from './interaction-display.component';
+import { CopierComponent, OppiaValueGenerator, RandomSelectorComponent } from 'pages/exploration-editor-page/param-changes-editor/value-generator-editor.directive';
 
 @NgModule({
   imports: [
     CommonModule,
   ],
   declarations: [
-    InteractionDisplayComponent
+    InteractionDisplayComponent,
+    OppiaValueGenerator,
+    RandomSelectorComponent,
+    CopierComponent
   ],
   entryComponents: [
+    OppiaValueGenerator,
+    RandomSelectorComponent,
+    CopierComponent
   ],
   exports: [
-    InteractionDisplayComponent
+    InteractionDisplayComponent,
+    OppiaValueGenerator,
+    RandomSelectorComponent,
+    CopierComponent
   ],
 })
 
diff --git a/core/templates/pages/exploration-editor-page/param-changes-editor/param-changes-editor.component.html b/core/templates/pages/exploration-editor-page/param-changes-editor/param-changes-editor.component.html
index c2aae2462a..9afb9fe906 100644
--- a/core/templates/pages/exploration-editor-page/param-changes-editor/param-changes-editor.component.html
+++ b/core/templates/pages/exploration-editor-page/param-changes-editor/param-changes-editor.component.html
@@ -70,10 +70,10 @@
                 required
                 ng-change="onChangeGeneratorType(paramChange)">
         </select>
-        <value-generator-editor generator-id="paramChange.generatorId"
-                                customization-args="paramChange.customizationArgs"
-                                obj-type="'UnicodeString'">
-        </value-generator-editor>
+        <oppia-value-generator-editor [generator-id]="paramChange.generatorId"
+                                      [customization-args]="paramChange.customizationArgs"
+                                      [obj-type]="'UnicodeString'">
+        </oppia-value-generator-editor>
       </span>
       <button type="button" class="oppia-delete-param-change-button oppia-transition-200"
               ng-click="deleteParamChange($index)" title="Delete parameter change">
diff --git a/core/templates/pages/exploration-editor-page/param-changes-editor/value-generator-editor.directive.ts b/core/templates/pages/exploration-editor-page/param-changes-editor/value-generator-editor.directive.ts
index 46ff23fdb6..83de1804d3 100644
--- a/core/templates/pages/exploration-editor-page/param-changes-editor/value-generator-editor.directive.ts
+++ b/core/templates/pages/exploration-editor-page/param-changes-editor/value-generator-editor.directive.ts
@@ -12,6 +12,10 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+import { ChangeDetectorRef, Component, ComponentFactoryResolver, Input, SimpleChange, ViewChild, ViewContainerRef } from '@angular/core';
+import { downgradeComponent } from '@angular/upgrade/static';
+import ng from 'angular';
+
 /**
  * @fileoverview Directives for the parameter generator editors.
  */
@@ -19,47 +23,80 @@
 // Individual value generator directives can be found in
 // extensions/value_generators/templates.
 
-interface ValueGeneratorEditorCustomScope extends ng.IScope {
-  objType?: string;
-  generatorId?: string;
-  getObjType?: (() => string);
-  getGeneratorId?: (() => string);
-  initArgs?: Object;
-  getInitArgs?: (() => Object);
+@Component({
+  selector: 'randomSelector',
+  template: '<h2>Random Selector</h2>'
+})
+export class RandomSelectorComponent {
+  @Input() customizationArgs;
+  @Input() generatorId;
+  @Input() initArgs;
+  @Input() objType;
+}
+
+@Component({
+  selector: 'copier',
+  template: '<h2>Copier</h2>'
+})
+export class CopierComponent {
+  @Input() customizationArgs;
+  @Input() generatorId;
+  @Input() initArgs;
+  @Input() objType;
+}
+
+@Component({
+  selector: 'oppia-value-generator-editor',
+  template: '<ng-template #interactionContainer></ng-template>'
+})
+export class OppiaValueGenerator {
+  @Input() customizationArgs;
+  @Input() generatorId;
+  @Input() initArgs;
+  @Input() objType;
+
+  @ViewChild('interactionContainer', {
+    read: ViewContainerRef}) viewContainerRef!: ViewContainerRef;
+
+  TAG_TO_INTERACTION_MAPPING = {
+    copier: CopierComponent,
+    'random-selector': RandomSelectorComponent
+  };
+
+  constructor(
+    private componentFactoryResolver: ComponentFactoryResolver,
+    private changeDetectorRef: ChangeDetectorRef
+  ) {}
+
+  ngAfterViewInit(): void {
+    let componentName = this.generatorId.replace(
+      /([a-z])([A-Z])/g, '$1-$2').toLowerCase();
+
+    const componentFactory = this.componentFactoryResolver
+      .resolveComponentFactory<CopierComponent>(
+        this.TAG_TO_INTERACTION_MAPPING[componentName]);
+
+    const componentRef = this.viewContainerRef.createComponent<CopierComponent>(
+      componentFactory);
+
+    componentRef.instance.customizationArgs = this.customizationArgs;
+    componentRef.instance.generatorId = this.generatorId;
+    componentRef.instance.initArgs = this.initArgs;
+    componentRef.instance.objType = this.objType;
+
+    componentRef.changeDetectorRef.detectChanges();
+    this.changeDetectorRef.detectChanges();
+  }
+
+  ngOnChanges(changes: { generatorId: SimpleChange }): void {
+    if (changes.generatorId.currentValue !== changes.generatorId.currentValue &&
+      this.viewContainerRef) {
+      this.viewContainerRef.clear();
+      this.ngAfterViewInit();
+    }
+  }
 }
 
-angular.module('oppia').directive('valueGeneratorEditor', [
-  '$compile', function($compile) {
-    return {
-      restrict: 'E',
-      scope: {
-        customizationArgs: '=',
-        generatorId: '=',
-        initArgs: '=',
-        objType: '='
-      },
-      link: function(scope: ValueGeneratorEditorCustomScope, element) {
-        scope.$watch('generatorId', function() {
-          var directiveName = scope.generatorId.replace(
-            /([a-z])([A-Z])/g, '$1-$2').toLowerCase();
-          scope.getGeneratorId = function() {
-            return scope.generatorId;
-          };
-          scope.getInitArgs = function() {
-            return scope.initArgs;
-          };
-          scope.getObjType = function() {
-            return scope.objType;
-          };
-          element.html(
-            '<' + directiveName +
-            ' customization-args="customizationArgs"' +
-            ' get-generator-id="getGeneratorId()"' +
-            ' get-init-args="getInitArgs()"' +
-            ' get-obj-type="getObjType()"' +
-            '></' + directiveName + '>');
-          $compile(element.contents())(scope);
-        });
-      }
-    };
-  }]);
+angular.module('oppia').directive(
+  'oppiaValueGeneratorEditor', downgradeComponent({
+    component: OppiaValueGenerator}));
diff --git a/core/templates/pages/exploration-editor-page/services/exploration-data.service.ts b/core/templates/pages/exploration-editor-page/services/exploration-data.service.ts
index 9c4ddb1ffa..0067415535 100644
--- a/core/templates/pages/exploration-editor-page/services/exploration-data.service.ts
+++ b/core/templates/pages/exploration-editor-page/services/exploration-data.service.ts
@@ -152,6 +152,16 @@ export class ExplorationDataService {
             this.loggerService.info(JSON.stringify(response));
             this.draftChangeListId = response.draft_change_list_id;
             this.data = response;
+            this.data.param_changes = [
+              {
+                name: 'ParamChange',
+                generator_id: 'RandomSelector',
+                customization_args: {
+                  list_of_values: ['3', '4'],
+                  parse_with_jinja: true
+                }
+              }
+            ];
             const draft = this.localStorageService.getExplorationDraft(
               this.explorationId);
             if (draft) {
diff --git a/core/templates/pages/exploration-editor-page/settings-tab/settings-tab.component.html b/core/templates/pages/exploration-editor-page/settings-tab/settings-tab.component.html
index c8fe70bb71..b698e1a779 100644
--- a/core/templates/pages/exploration-editor-page/settings-tab/settings-tab.component.html
+++ b/core/templates/pages/exploration-editor-page/settings-tab/settings-tab.component.html
@@ -659,10 +659,10 @@
     <h3>Parameters used in this exploration</h3>
     <div class="row">
       <div class="col-lg-12 col-md-12 col-sm-12">
-        <div [hidden]="!(isEmpty(explorationParamSpecsService.savedMemento.getParamDict()))">
+        <div [hidden]="!(explorationParamSpecsService.savedMemento && explorationParamSpecsService.savedMemento.getParamDict())">
           <em>No parameters used.</em>
         </div>
-        <ol>
+        <ol *ngIf="explorationParamSpecsService.savedMemento">
           <li *ngFor="let item of explorationParamSpecsService.savedMemento.getParamDict() | keyvalue">
             <b>{{item.key}}</b> ({{item.value.getType().getName()}})
           </li>
